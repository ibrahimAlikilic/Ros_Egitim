1) urdf dosyasını oluştur : "nano "my_robot.urdf""
2) urdf dosyasını kodla
3) urdf dosyasını çalıştır : "ros2 launch urdf_tutorial display.launch.py model:=/home/ibrahim/Ros_Egitim/Projeler/Robot_Modelleme/src/my_robot_description/urdf/my_robot.urdf"

Kendi paketlerimiz ile publish etmemiz lazım.
1) Dizinimize gel.
2) "ros2 run robot_state_publisher robot_state_publisher --ros-args -p robot_description:="$(xacro /home/ibrahim/Ros_Egitim/Projeler/Robot_Modelleme/my_robot.urdf)"" ile yayın gerçekleşsin
3) joint state publisher da gelsin : "ros2 run joint_state_publisher_gui joint_state_publisher_gui"
4) RViz ortamını başlatalım : "ros2 run rviz2 rviz2"
Not : Kodda güncelleme yapınca publisher kodunu kapatıp yayını tekrardan başlatmak lazımmış.

Şimdi yukarıdaki işlemleri tek tek her seferinde yazmamak için bir başlart maklasörü yazacağız.
1) "ros2 pkg create my_robot_description" ile paketi oluştur.
2) "my_robot_description" içerisinde gereksiz olan sec ve include sil
3) lanuch ,rviz ve urdf klasörlerini "my_robot_description" içeirisinde oluştur.
4) CMaleList.txt içeirsine "install(
  DIRECTORY urdf launch rviz
  DESTINATION share/${PROJECT_NAME}/
)" ekle.
5) urdf uzantılı dosyamızı urdf klasörünün içerisine taşı.
6) Çalışma alanımızı build edelim : "Ros_Egitim/Projeler/Robot_Modelleme" dizinime geldim ve "colcon build" dedim
7) soruce edelim "source ~/.bashrc"
launch dosyallarını oluşturmaya başlayalım :
1) Eskiden oluşturmuş olduğumuz dosyaları aldık ve içerisinde düzenlemeleri gerçekleştirdik.


1)"/home/ibrahim/Ros_Egitim/Projeler/Robot_Modelleme/src/my_robot_description/urdf" dizinine gel ve "ros2 run robot_state_publisher robot_state_publisher --ros-args -p robot_description:="$(xacro /home/ibrahim/Ros_Egitim/Projeler/Robot_Modelleme/src/my_robot_description/urdf/my_robot.urdf)"" ile publis işlemine başlat.
2) "ros2 run joint_state_publisher_gui joint_state_publisher_gui" çalıştır.
3) "ros2 run rviz2 rviz2" çalıştır.
4) Açılan RViz ortamında gerekli düzenlemeleri yap ve ardından -> file -> save config as  -> rviz içine kaydet ("/home/ibrahim/Ros_Egitim/Projeler/Robot_Modelleme/src/my_robot_description/rviz")
5) display.launch.py üzerinde güncellemeler gerçekleştir. 
6) display.launch.xml üzerinde güncellemeler gerçekleştir.
7) Çalışma alanı dizinine gel ve ( şu anda "/home/ibrahim/Ros_Egitim/Projeler/Robot_Modelleme") build ve source işlemlerini gerçekleştir : "colcun build" " source ~/.bashrc
Sorunlar :
"ros2 launch my_robot_description display.launch.py" hata verdi ben de build ile ilgili sorun olabilir diye hem bashrc içine gönmdüm hem de terminalde soruce edip durdum lakin olmadı ardından kodda mı sıkıntı var diye gpt ile denedim lakin gene çözülmedi ben de /src içinde de build yaptım geen olmadı ardından build ile gelen tüm klasörleri sildim ve Robot_Modelleme dizininde tekrardan build ettim ve bashrc ye de gömdüm . Sonuç olarak "display.launch.xml" ile çalışıyor lakin ""display.launch.py" hata veriyor.

Not : robot_modelleme_ws devam ediyorum

Gazebo :
Her parçanın eylemsizlik momenti farklıdır , bu yüzden her bir şekil için macro  tanımlanıp ardından gerekli yerde kullanılacak.
Link etiketi <inertial></inertial> tagları arasında oluşturuyoruz.

Kodlama bittikten sonra gazebo ortamına aktarabilmemiz için kontrol paketi eklememiz lazım. ( Buna gazebo ortamına göndermek (spun etmek) denir.
	Bunun için gazebo ros paketini kullancağız.
1) Terminal üzerinden urdf klasörü dizinine git
2) ilk önce main.xacro dosyamızı çalıştıralım : "ros2 run robot_state_publisher robot_state_publisher --ros-args -p robot_description:="$(xacro main.xacro)""
3) bu çalışırkan : "ros2 launch gazebo_ros gazebo.launch.py" ile gazeboyu çalıştır.
4) "ros2 run gazebo_ros spawn_entity.py -topic robot_description -entity my_robot" ile robotu gazebo ortamına ilet.
	[INFO] [1745129268.925376462] [spawn_entity]: Spawn status: SpawnEntity: Successfully spawned entity [my_robot] görünce anla ki sorun yok başarılı bir şekilde iletildi.
***
Ayrı ayrı çalıştırmak yerine launch dosyası oluşturup beraber çalıştırıcaz :
1) /Ros_Egitim/Projeler/Robot_Modelleme/robot_modelleme_ws/src dizinine gel ve paket oluştur : "ros2 pkg create my_robot_bringup"
2) my_robot_bringup dizinine gel ve launch dosyasını oluştur : "mkdir launch"
3) launch dosyasında kodlama yap : Not : CMakeList de insstall kısmını eklemen lazım unutma. Aynı şekilde package.xml de unutma ( ilgili bağımlılıklarımızı çağırıyoruz. ) 

5) ws dizinine dön ve : "colcon build --symlink-install" de (uyarı verirse önemli değil çalışmayı engellemiyor) ardından source et : "source ~/.bashrc" bunun yerine "source install/setup.bash" kullan.
***
Aynı anda rviz de çalıştırıp eş zamanlı görselleştirmek isteyebiliriz.
1) /Ros_Egitim/Projeler/Robot_Modelleme/robot_modelleme_ws/src/my_robot_bringup dizinine gel ve "rviz" klasörü oluştur. Ardından gerekli kodlamaları gerçekleştir.

Problemler : 
	görüyoruz ki robotumuz sabit durması gerekirken geriye doğru ilerliyor biz de bunun engellemek için kodumuzun eylemsizlik momenti kısmına bazı eklemeler yapacağız.
	Ayrıca rviz ortamında olması gerektiği gibi durmuyor bunun sebebi de aynı .
	
Renkler default geliyor , bizim istediğimiz renkler gelmiyor
Bunun çözümü için "properties_gazebo.xacro" oluşturuyoruz.





Çalıştırma : "ros2 launch my_robot_bringup my_robot_gazebo.launch.xml"
